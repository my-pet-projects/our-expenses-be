// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package container

// import (
// 	"dev.azure.com/filimonovga/our-expenses/our-expenses-server/api"
// 	"dev.azure.com/filimonovga/our-expenses/our-expenses-server/api/handler"
// 	"dev.azure.com/filimonovga/our-expenses/our-expenses-server/api/router"
// 	"dev.azure.com/filimonovga/our-expenses/our-expenses-server/config"
// 	"dev.azure.com/filimonovga/our-expenses/our-expenses-server/infrastructure/db"
// 	"dev.azure.com/filimonovga/our-expenses/our-expenses-server/infrastructure/db/repository"
// 	"dev.azure.com/filimonovga/our-expenses/our-expenses-server/logger"
// 	"dev.azure.com/filimonovga/our-expenses/our-expenses-server/service/category"
// 	"dev.azure.com/filimonovga/our-expenses/our-expenses-server/validator"
// 	"go.mongodb.org/mongo-driver/mongo"
// )

// // Injectors from container.go:

// func CreateServer(database *mongo.Database) (*api.Server, error) {
// 	configConfig, err := config.ProvideConfiguration()
// 	if err != nil {
// 		return nil, err
// 	}
// 	appLogger, err := logger.ProvideLogger(configConfig)
// 	if err != nil {
// 		return nil, err
// 	}
// 	categoryRepository := repository.ProvideCategoryRepo(appLogger, database)
// 	categoryService := category.ProvideCategoryService(categoryRepository)
// 	validatorValidator := validator.ProvideValidator()
// 	categoryController := handler.ProvideCategoryController(categoryService, appLogger, validatorValidator)
// 	routerRouter := router.ProvideRouter(categoryController)
// 	server, err := api.ProvideServer(configConfig, appLogger, routerRouter)
// 	if err != nil {
// 		return nil, err
// 	}
// 	return server, nil
// }

// func InitDatabase() (*mongo.Database, error) {
// 	configConfig, err := config.ProvideConfiguration()
// 	if err != nil {
// 		return nil, err
// 	}
// 	appLogger, err := logger.ProvideLogger(configConfig)
// 	if err != nil {
// 		return nil, err
// 	}
// 	database, err := db.CreateMongoDBPool(configConfig, appLogger)
// 	if err != nil {
// 		return nil, err
// 	}
// 	return database, nil
// }
