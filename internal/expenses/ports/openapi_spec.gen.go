// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package ports

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXTW/jNhD9KwLboxqnuzfftk0apIcNsN2ih4UPtDS2uZBIZTh0KgT678WQ+qAj+iNt",
	"AvRkWRzOvHnzZkg9i8LUjdGgyYrls7DFDmrpH3+VBFuDLT83aBpAUuBXVGE0/1LbgFgKS6j0VnS5UCW/",
	"LsEWqBpSbCX+1OrRQabKzGwy2kFWDH5zsTFYSxJL4ZwqRT53WMEeqiiU0gRbQF7SsoZ5tM+yhkSgmeNG",
	"4pCyIqj9w48IG7EUPywmShY9H4uRjG50JhFlK7ouFwiPTiGUYvlN+Dw8Ng5COzEksRo3mvV3KIg9DV5v",
	"/25A20DuIdVFVIRL8UHk7aLk+vDz3HKxRanLr4Zkdc7J3WTZ5cK6dQ9JwetZHvk4x3ZU4ghpiuobSTC4",
	"/wKNQTpO9u1rCTyPOxelJK/XUfP84idSXikzff473l+w40Pm87TOknWLaDDBjykTLeeNM78WdbTS9PHD",
	"lFnUuDVYK7dHHQ3LM1Jelj4EHMyTafS6Xj4LWVUPG7H8dprLz/A09cJbtOJFA7Hv1/PzcD5qVt1qyvOY",
	"rFkGYe1yRSfa5c2mQ0KlA7yzyrw7iHiYJ/Hry1McZ9XJCdM7TWG51wS4D0hAuzokw7OoNtpP/hYkRlun",
	"9o6EdnQK3Se0M5Qku795tXpyPupr0JQ8uguHCLpok4uvm10NquKFuXHrKrLVrl6HYfDopCZF7YXmhKpJ",
	"IDxyKtwzCwFNFCnKtc8sVdypQl/ANiZZqVR3T4XR8FS1mSxLKP9TiyfAHWmAuIaHqPyGLMp7VjTL+k1v",
	"s67OZG2cprN42UvE7xw7R4LCoaL2D+7DAHwNEgE/OdpN/34biPr9r68iDxdT9hRWJyQ7okZ07FjpjUnk",
	"8HDzwNaKKjZ/cJgNB2FmAffe1x7QBvOfr66vrpkQ04CWjRJL8dG/Ctc5D3cR37AaYynRqAiSwGaSZTCU",
	"P1PaK8O2lqC+Ej4ISt7CzS4+leXtKBSmFSz9Yso2nL2a+t6VTVOpwm9bfLfhKh6G2rmRF59vzNiL87dH",
	"SYZVyz8TWBHXmdCBL3xoDE/Dh+vrd4A59t4JuDjasMVGuoreDEm4CCWCO801LYh7u7fxPVRLviCky+9t",
	"FjidxFtIKOcONGsC7KiasGMul8GyP5/9R42sgQCtv+kc+t2gqTMed1zYjaoIMFvzKFC8+ujA36LDV5U3",
	"npU8j0i75CTgK9QhBjIXIyDzDvERrKvIZmo4udOxo+XjCE7JZrwZdN3qHfvk8N53skXY4n/ZKWm5Dx0f",
	"BnSQs8OqH/d2uVg874wlrle34Cmdi71EJddVYHlYDO3VZyoqU8iKl9j5qvsnAAD//6ZFNAf8EAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
