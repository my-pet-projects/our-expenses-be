// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package ports

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWTW/cNhD9K8K0R9Vyk5tuae0W7iEG0hQ9BHvgSrO7DCRSHo6cCob+ezGkvrLietdI",
	"DOS0WnE08+a9xyGfoLB1Yw0adpA/gSsOWCv/+Lti3Fvq5Lkh2yCxRr+iC2vkl7sGIQfHpM0e+hR0Ka9L",
	"dAXphrVEwT9GP7SY6DKxu4QPmBRj3hR2lmrFkEPb6hLSdcIKH7FalNKGcY8kS0bVuK72XtUYKbRK3Cga",
	"W9aMtX/4mXAHOfyUzZRkAx/ZREY/JVNEqoO+T4HwodWEJeSfwPfhsUkRPsDYxFxzM6Ww289YsOQc89/+",
	"16Bx+AEbS7xmvlhocilcDCkv73XAcLbVBb9TjVhvN4pxBHSqsW23tNuLJPmashXoFErF3imT2+TFL6y9",
	"RkfOOGrRf5ou0cUavCWyFBHLlhGH+uDEry02gDb89s0MZ+HzGp1T+5OJxuVznQwFx/BoG4Pu+ROoqrrf",
	"Qf7peQXe45fZK9/DqhfNj8Fr58dHbGdOqDb9Zm75tCtvBu9c5MiI0c/toaFCTI4FuyfnwF2EsBFBcnfz",
	"YspSOQ5qNBwd70VLhKbooosv2WUpNKSLo3DbbqtFrGnrbdgBD60yrLm7MJxJNxGEJ4bXnbAQ0CwqLXod",
	"OnteoQ/oGhtVKmbpWRiDX6ouUWWJ5bf4eg2uT8Fh0ZLm7m9x5+BnVIT0ruXD/O+Psdhf/36ENFwAJFNY",
	"nasfmBvoJbE2O7tu6uP9zb1Ea64k/L6lZCDHJQ7p0ed6RHIh/Ner66trIdE2aFSjIYe3/lU4Nj3cbHl0",
	"NdZxxOyEitElSqgcKUy08ey6zjHWV+CLkJJPZMPAu7K8ncgWKtHxb7bswtA2PPhfNU2lC/9Z9tmFK0/Y",
	"6ucGwXIwCmNHg3tAyVaUl58ZLCy1ZWrRix3M5Wl4c339CjAn/z4Dl6YYidiptuLvhiScoJHirRFNC5b9",
	"McSk4Nq6VnKyxOX3MRn5Aew522PEOX+iEU+gm1wTvljbZYwcRrq/yKkaGcn5I/LrvDuydSIjQ4Td6YqR",
	"kq2MES2rDy36C1O4vfrgleTpgrTL7izHGNhejIDtt9ffvKJHj253z9lTIn5Il8atNu62MByDlVqqhlHr",
	"8ix7OljHolOfyYRM4VGRVtsqsDwuBmsPnUJlC1XJkiTf9P8HAAD//+nesGXgDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
