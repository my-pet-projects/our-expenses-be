// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package ports

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXTW/cNhD9KwLbo2q5yU23tHYL9xAXiYsegj1wpdldBhJJD4dOBWP/ezGkvryi12t4",
	"A+TkjTgcvnnz3pB5FJVprdGgyYnyUbhqB60MP3+XBFuDHf+2aCwgKQgrqjKa/1JnQZTCESq9FftcqJo/",
	"1+AqVJYUR4l/tLr3kKk6M5uMdpBVQ95cbAy2kkQpvFe1yJcJG3iAZnaU0gRbQF7SsoXlaR9lC4mDFomt",
	"xKFkRdCGHz8jbEQpfiomSoqej2IkYz8mk4iyE/t9LhDuvUKoRflFhDoCNj6EdmIoYjVuNOuvUBFnGrJ+",
	"AmuQlkRXsxaciq7aqaZG0K8urQexKDAX8J8F7eB0tq7jhlQuMiSbl/bfhaBDauf9DAEpSq8kwam0xnV3",
	"RqZqSUGUo7D5wy+kghwWInwDF+GgfFHJMWauEQ0myDB1wkchOAtrM5sqTe/fTZXM3NiCc3L7bKJheUHC",
	"YYvjgUN4soxeW+WjkE1zuxHll+MEfoRvkx7P4bCTplzvmZeHXGp+jKhW+9VU8nNyZi28VsoJm5zXrHNQ",
	"x1Q5686zPr1JED6Az26uXk15zpdeC5qSl1jlEUFXXXLxdQa3qKqDcOPXzSxW+3YdHXTvpSZF3YnhhMom",
	"ED4zMm+YhYhmdtKs1r6y4x36BM6aZKdSlpgao+Fb02WyrqF+iy9S4O4GhR5YAtZ+u4T0dwzqMjJZCMmc",
	"b1ON48+L3Z99m8nWeE0voo1pI4olbD4AKo+Kus9sooh5DRIBP3jaTf/6Y+Dor3/vRB5fZ5wprk4wdkRW",
	"7Dmx0huzhH53e3XL0YoaDr/1mPU9dZkDfAi5HgBdDP/14vLiknkwFrS0SpTiffgU3zQBbjF/FVjjKOFR",
	"BEngMskKGDqfKR1E4TpH0F6IcAhK3sI+Fx/q+nrUCHMKjn4zdRfvKk29baW1jarCtuKri+/ROJFemlfz",
	"+4AZO7ivepRkWLD8ZwIr5k0m9BC6Hj0RaHh3efkdYI62OwIXxxiO2Ejf0NmQxIdD4nCvuacVsa37mGCd",
	"VvKFmm5/iClwuq62kFDOn6BZE+BG1cQdS7kMkf0lFl72sgUCdOFl8DTvBk2b8aTjxm5UQ4DZmqef4tV7",
	"D+F1Gf9rEYIXLc9npJ1yCfCT4ykGnj0nIiDz9vNX31GjTx8mR+XJET+kStNSG9wWh2OUksemH7WuLIrH",
	"nXHEfdoXPCFz8SBRyXUTWR4Wo7T7SkVjKtnwEidf7f8PAAD//5JTMTF9DwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
