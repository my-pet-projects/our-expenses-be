// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package ports

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXTW/cNhD9KwLbo2q5yU23tHYL9xAXiYsegj1wpdldBhJJD4dOBWP/ezGkvryi12t4",
	"A+S0sjgavnnz3pB+FJVprdGgyYnyUbhqB60Mj79Lgq3Bjp8tGgtICsKKqozmX+osiFI4QqW3Yp8LVfPr",
	"GlyFypLiKPGPVvceMlVnZpPRDrJqyJuLjcFWkiiF96oW+TJhAw/QzLZSmmALyEtatrDc7aNsIbHRIrGV",
	"OJSsCNrw8DPCRpTip2KipOj5KEYy9mMyiSg7sd/nAuHeK4RalF9EqCNg401oJ4Yipj1XYwqz/goVcc4h",
	"/yewBmlJeTVrxqk4q51qagT96iJ7EItScwH/WdAOTuftOn6QykWGZPPS93ch6JDkeWdDQIrSK0lwKq1x",
	"3Z2RqVpSkOcocX7xC6kgjIUc38BF2ChfVHKMmWtEgwkyTJ1wVAjOwtrMsErT+3dTJTNftuCc3D6baFhe",
	"kHDY4rjhEJ4so9dW+Shk09xuRPnlOIEf4dukx3M47KR513vm5XGXmiQjqtV+NZX8nJxZC6+VcsIm5zXr",
	"HNQxVc6686xPbxKED+Czm6tXU57z8deCpuRxVnlE0FWXXHydwS2q6iDc+HUzi9W+XUcH3XupSVF3Yjih",
	"sgmEz4zMG2YhopntNKu1r+x4hz6BsybZqZQlpsZo+NZ0maxrqN/iixS4u0GhB5aAtd8uIf0dg7qMTBZC",
	"MufbVOP49eLrz77NZGu8phfRxrQRxRI2bwCVR0XdZzZRxLwGiYAfPO2mv/4YOPrr3zuRx3saZ4qrE4wd",
	"kRV7Tqz0xiyh391e3XK0oobDbz1mfU9d5gAfQq4HQBfDf724vLhkHowFLa0SpXgfXsXbTYBbzG8F1jhK",
	"eBRBErhMsgKGzmdKB1G4zhG0FyJsgpI/YZ+LD3V9PWqEOQVHv5m6i2eVpt620tpGVeGz4quLN9M4kV6a",
	"V/PzgBk7OK96lGRYsPwzgRXzJhN6CF2Pngg0vLu8/A4wR9sdgYtjDEdspG/obEjixSGxudfc04rY1n1M",
	"sE4r+UBNtz/EFDgdV1tIKOdP0KwJcKNq4hdLuQyR/SEW7tuyBQJ04WbwNO8GTZvxpOPGblRDgNmap5/i",
	"1XsP4XYZ/8kIwYuW5zPSTjkE+MrxFAPPnhMRkHn7/qvvqNGnF5Oj8uSIH1KlaakNbovDMUrJY9OPWlcW",
	"xePOOOI+7QuekLl4kKjkuoksD4tR2n2lojGVbHiJk6/2/wcAAP//vUod+ocPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
