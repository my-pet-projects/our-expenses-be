// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package ports

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYTW/jNhD9KwLbo7pOd2++bTdpkB42QLpFD4scaGlscyGRynDoXSPQfy+G+qIs2lLa",
	"BOgpjjmcj/eGj0M/i8yUldGgyYr1s7DZHkrpP36SBDuDR/5coakASYFfUZnR/JeOFYi1sIRK70SdCpXz",
	"1znYDFVFiq3EX1o9OUhUnphtQntIss5vKrYGS0liLZxTuUinDgs4QBGEUppgB8hLWpYwjfZZlhAJNHFc",
	"SexKVgSl//AzwlasxU+rAZJVi8eqB6PunUlEeRR1nQqEJ6cQcrH+KnwdPjcOQnvRFfHYbzSbb5ARe+q8",
	"3vyoQNsG3DHUWUDC0vwg8LaouDb8tLZU7FDq/IshWcw5uR0s61RYt2lTUvBylHs85tAOKA4yjUF9LQk6",
	"9w9QGaTzYN+8FMD5vFORS/L92vc8f/ELKd8pk/6EH9le6h08SIIF/IXG/5q1E2x9wukUlJH700xj0N8g",
	"GoygbfLIAfbGiV8L9EFp+vB+wCmQgRKslbuzjrrlCcSnjdQE7MyjZQSFTqvZSAufHCLo7BjVxpfxj631",
	"ZIEk7oAuRIqzOEpv4qWNN1d1TJ9et+TlR86zMCcPXQuP6zzTpa0Irp+FLIr7rVh/vZzBZ/g+COdr6Pai",
	"27MV9/nLc3ovPdaPQ53nNJAha9aWcxHR1le7SiKMdunNav7tKOK4Tus2fmV5ld78Tm9NrDhaUle8pCGT",
	"zk2sljtNgIcmBmhXNmBwS5dG+zHjCBKDrcPBChr17JV3F+m9jtLk7vrF3ZfyXFmCpqgwvKJqVKiyE3Pj",
	"NkVgq125ae6KJyc1KTouNKee8Bd1BqpqXpYD3LsagvxGktWK2JBNrD0Gjh/AVibKdUxfBmo1fC+Oicxz",
	"yP+TyESSi9+YF5ugp3UGxgGmZkcs/BkFCOOPQfEbksD3JD3LBzC+zboykaVxmmbhYi8B1Wdz73rwdH7S",
	"B0CCfKHspMKg2im9WKeGKWTp8DmpsI84rY1RhMyhouOf7Kodo0Ai4EdH++G/37se/OPvLyJtnqjsqVkd",
	"UN4TVaJmx6oF7ISf++t7tlZUsPm9w6QbahMLePC+DoC2Mf/13dW7Kw9bBVpWSqzFB/9V87Dz6a7Ct1Zl",
	"LEVUFIFnjkTyCetOVqK0P3T2aAnKd8IHQclbWInFxzy/6c8gAwqWfjP5seWdWmGVVVWozG9bfbPNo7zh",
	"ZY61cHhhxE5m5zZLMiwI/GdIVoQMEzrwlDea42F4f3X1Bmn2snYhXext2GIrXUGvlknziIkEd5o5zYhl",
	"s7Xx+lBKnv7i9HubFQ5j1g4inXMLGvy82ndNs2PaLp1lO3z5nzdkCQRo/Rg79rtFUyZ8qzCxW1UQYLJh",
	"mVO8+uTAv6eb31e88YTyNABtyTXN8/E4BzKLMyDzBvERrCvIJqobq+Kxg+XzGVxqm35sq+vHNzwn46H+",
	"4hFhi//lSYm3e3fiG4Fu2tlh0cq9Xa9Wz3tjifmqV6zSqThIVHJTNCh3i83xaisVhclkwUvs/LH+JwAA",
	"///UhqO+BhUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
