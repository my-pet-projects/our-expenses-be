// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package ports

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYT2/buBP9KgJ/v6O2zrY337qbbJA9NEC2iz0UOdDS2GYhkcpw5NYI9N0XQ4oSbdGR",
	"3SbAnqyIw/nz3swjlWdRmLoxGjRZsXwWtthCLd3j75JgY3DPzw2aBpAUuBVVGM2/tG9ALIUlVHojulyo",
	"kl+XYAtUDSm2En9r9dRCpsrMrDPaQlYEv7lYG6wliaVoW1WKfOqwgh1UUSilCTaAvKRlDdNon2QNiUAT",
	"x43EULIiqN3D/xHWYin+txghWfR4LAYwusGZRJR70XW5QHhqFUIpll+Eq8PlxkFoK0IRj8NGs/oKBbGn",
	"4PXmewPaenAPoS4iEs7NDyJvZxXXh5/WlosNSl1+NiSrOSe3o2WXC9uu+pQUXI7ygMcc2hHFUaYpqK8l",
	"QXD/AI1BOg32zaUAzuedi1KS69eh5/nFL6Rcp0z6E74XW6k38CAJzuAvNv5h1o6wdQnnU1AO3B9nmoL+",
	"BtFgAm1TJgbYGWduLdIHpenD+xGnSAZqsFZuTjoKyxOIjxvJBwzmyTKOKTkqp0UEXeyTwngZ+RginNV8",
	"nM/soAQyQ5IhSLpQLwfLZyGr6n4tll9ezuATfBsl5DUU7KxzpJe5+WNkqtCP3eNY5yk1YMj82vlcJFTm",
	"1UQ1wWhIb1b9bg8iHs+h3gESlHPJDOJO/HA+KG7fnV6b2S7tHedRTqlq7jQB7nwtoNvaw8FNXRvtjtw9",
	"SIy2jqMVtepJ+b9LdF8gNbu7vrj/uJy6Bk1JaXhF3WhQFUfmpl1Vka1u65XXzadWalK0P9OcBg4vIhtV",
	"k6jrxCF+x9j5GqL8DkSrl7Exm1R7jBw/gG1MkuuUwozUavhW7TNZllD+lMwkknvoGb3g8BhonYFxhMnv",
	"SIU/pQFR/ENQ3IYs8j1Jz/IAprfZts5kbVpNs3Cxl4jqk7mHHvxZDTOoNkrPK/CwAX/gJnZU4xBzWh3j",
	"CEWLivZ/sS8fagUSAT+2tB3/+iN04Z//fBa5/2BjT351xHlL1IiOHasesiOG7q/v2VpRxeb3LWbhipdZ",
	"wJ3ztQO03vzXd1fvrhxwDWjZKLEUH9wr/5nj0l3EXx6NsZTQUQSGJpM8Y2G2MqXd2Nm9JajfCRcEJW9h",
	"LRYfy/JmmEIGFCz9Zsp9zzz10iqbplKF27b4av0nqidmjrb4AsOIHd0k+yzJsCTwz5isiBkmbMFR7lXH",
	"wfD+6uoN0hyE7YV0cbBhi7VsK3q1TPyVPhG81cxpQSycvY1TiFryDTBNv7NZ4HjV2kCic25Bg5vBoWv8",
	"jmm7BMv+AuY+9mUNBGjdVfbQ7xpNnfG5wsSuVUWA2YqFTvHqUwvu69L/t8EZTyjPI9DOOaj5jnyYA5mz",
	"MyDzBvERbFuRzVS4WKVjR8unM3ipbYaLW9c9vuGcHF7sXxwRtvhPTkq63cPEe4H27dxi1cu9XS4Wz1tj",
	"ifnqFqzSudhJVHJVeZTDoh+vvlJRmUJWvMTOH7t/AwAA//+tNz/UFBQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
