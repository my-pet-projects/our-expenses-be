// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package ports

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXTW/jNhD9KwTboxqnuzfftk1apIdNsU3Rw8IHWhrbXEikMhxmKwT+78WQ+qAj2nGQ",
	"BOjJsjicefPmzZB6lKVtWmvAkJPLR+nKHTQqPP6qCLYWO35u0baApCGs6NIa/qWuBbmUjlCbrdwXUlf8",
	"ugJXom5Js5X82+h7D0JXwm4E7UCUg99Cbiw2iuRSeq8rWcwd1vAAdRJKG4ItIC8Z1cA82mfVQCbQzHGr",
	"cEhZEzTh4UeEjVzKHxYTJYuej8VIxn50phBVJ/f7QiLce41QyeVXGfII2DgI7eSQxGrcaNffoCT2NHi9",
	"/rcF4yK5h1SXSRHOxQeJt7OS68PPcyuk8+vetYaXszXmlfFMllT9nKO7YPSU47SwwSDH7ZUiGHB8gdYi",
	"HWf3+qWMnZNgpSgIdBQ5v/iJdJDGTJCvoCMEKubJnGLnGtFihhBbZZoqGIuwlvSsNvTxw5RK0poNOKe2",
	"Rx0NyzMWnpY5BhzMs2n0yl0+SlXXtxu5/Hqawc/wfVL7WzTbWSOv78jnJ15umIyoVvvVlPIxSbMY4tr5",
	"as60yts2bArqlCqT6hzt1ZsM4QN4cXP1YsoLPgEbMJQ90UqPCKbssosv6/AWdfnE3Pp1ndga36xjB917",
	"ZUhTd6Y5oW4zCI+MzRtmIaJJIiW59pmdrtAXcK3NVirXElNhDHyvO6GqCqrX9EUO3N2g0CfKSWp4iCps",
	"EEne8xLD2m/nG/+MATpBVgQT4XyT28+vj4R1vhGqsd7Qs/lG52l9Aqw5BxwRSo+aur+4IyMBa1AI+MnT",
	"bvr320D4H//cySLe+9hTXJ0Q7YhauWfH2mxsJpfbq1u21lSz+a1HMRxAwgE+BF8PgC6a/3xxeXHJxNgW",
	"jGq1XMqP4VW8LQW4i/QC01pHmYZHUAROKJbTICOhTVCY6xxBcyFDEFS8hYeG/FRV16PgmF5w9Iutunjw",
	"GepngGrbWpdh2+KbizfdON6eG37p4bIP4jk4/HqUZFn9/DOBlWm9CT0EAcQGCzR8uLx8B5hjD5+Ai6MN",
	"W2yUr+nNkMRbSCa4N1zTknhG9DahlxrFp3O+/MFmgdPZt4WMcn4Hw5oAN6om7pjLZbDsT8TwzaAaIEAX",
	"rhmHfjdoG8Fjkwu70TUBijW3qubVew/huho/WoLxrORFQto5JwrfXw4x8DA6EwHZ18dfvaNGD285J+XJ",
	"Fv9LlealNnRbHI5RSh7rftS65WLxuLOOuE77BU/IQj4o1GpdR5aHxSjtPlNZ21LVvMTOV/v/AgAA//+X",
	"H11q1w8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
