// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package ports

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXTW/jNhD9KwTbo7pOd2++bZu0SA+bYpuih0UOtDS2uZBIZTjMVgj034sh9UFHtONg",
	"E6Any+JwPt68N6QeZWmb1how5OT6UbpyD40Kj78qgp3Fjp9btC0gaQgrurSGf6lrQa6lI9RmJ/tC6opf",
	"V+BK1C1ptpJ/G33vQehK2K2gPYhy9FvIrcVGkVxL73Uli6XDGh6gTkJpQ7AD5CWjGlhG+6QayARaOG4V",
	"jiVrgiY8/IiwlWv5w2qGZDXgsZrA6CdnClF1su8LiXDvNUIl119kqCPkxkFoL8ci7qaNdvMVSmJPo9er",
	"f1swLoJ7CHWZNOHc/CDxdlZxQ/hlbYV0fjO41vBytKa6Mp7Jkqqfc3QbjJ5inDY2GOSwvVQEYx6fobVI",
	"x9G9eili5xRYKQoEnUjOL34iHaixIOR3wBECFctiTqFzhWgxA4itMqIKxiKsJZrVhj68n0tJpNmAc2p3",
	"1NG4vEDhaZtjwNE8W8bA3PWjVHV9s5XrL6cR/ATfZra/htjOGnmDIp+feMthctffzXUe4zEzIK6dT+GM",
	"Pl5XpWlSp6h4bQjwIUYB45u4l8XdWBMGaAcKk62zaJJuHtX2daZBY93i+vLFLSr4xGzAUPYELD0imLLL",
	"Lr5sIrSoyyfm1m/qxNb4ZhMVd++VIU3dmeaEus1keGTMXjMKMZskUlLrUFmuuXOHPoNrbbZTOQnNjTHw",
	"re6EqiqovktHmeRuR3I/YU7Sw8OswgaR1L1sMWz8brnxzxigE2RFMBHON7n9/PpIWOcboRrrDT1bb3Se",
	"9iektcSAI0LpUVP3F4s5ArABhYAfPe3nf7+NgP/xz60s4j2RPcXVOaM9USt7dqzN1mZqubm8YWtNNZvf",
	"eBTjgSUc4EPw9QDoovnP7y7eXTAwtgWjWi3X8kN4FW9XId1VeuFpraOM4BEUgROK6TTSSGgTGOY6R9C8",
	"kyEIKt7CQ0N+rKqriXAMLzj6xVZdPCgNDTNAtW2ty7Bt9dXFm3GcjM/NzfQw6gN5Dg7LIUuyzH7+mZOV",
	"ab8JPQQCRIEFGN5fXLxBmpOGT6SLkw1bbJWv6dUyibeWTHBvuKcl8YwYbIKWGsWneb79wWaF87G5gwxz",
	"fgfDnAA3sSbuWNJltBwO0/CNoRogQBeuJYd+t2gbwWOTG7vVNQGKDUtV8+q9h3C9jR85wXjR8iIB7ZwT",
	"he87hznwMDozA7JvEB/B+Zqc0OMNIB87WT6ewSnaTDeMvr97Q50cXtJOSoQt/pdKydN9VHwc0JHOHuth",
	"3Lv1avW4t464X/2Kp3QhHxRqtakjyuNilNdQqaxtqWpeYud3/X8BAAD///1P0sWLEAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
