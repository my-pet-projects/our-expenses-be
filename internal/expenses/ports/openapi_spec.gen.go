// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package ports

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXzW7jNhB+FYLtUY3T3Ztv2yYt0sOm2KboYeEDLY1tLiRSGQ6zFQK/ezGkfuiIdhwk",
	"AXqyrBnOzzffzFCPsrRNaw0YcnL5KF25g0aFx18VwdZix88t2haQNASJLq3hX+pakEvpCLXZyn0hdcWv",
	"K3Al6pY0a8m/jb73IHQl7EbQDkQ52C3kxmKjSC6l97qSxdxgDQ9QJ660IdgCssioBubePqsGMo5mhluF",
	"Q8qaoAkPPyJs5FL+sJggWfR4LEYw9qMxhag6ud8XEuHea4RKLr/KkEeIjZ3QTg5JrMaDdv0NSmJLg9Xr",
	"f1swLoJ7CHWZFOHc+CCxdlZyvft5boV0ft2b1vBytMa8MpbJkqqfM3QXlJ5inBY2KOSwvVIEQxxfoLVI",
	"x9G9fili5yRYKQoEHUnOL34iHagxI+Qr4AiOinkyp9C5RrSYAcRWmaYKyiLIkp7Vhj5+mFJJWrMB59T2",
	"qKFBPEPhaZmjw0E9m0bP3OWjVHV9u5HLr6cR/AzfJ7a/RbOdNfL6jnx+4s2HyWq/mvI8xmNmQJSdT+FM",
	"f7xtl6ZBnaJiUpKjDXqTQXkIXtxcvRjngtdeA4aya6z0iGDKLit8WVu3qMsn6tav60TX+GYd2+beK0Oa",
	"ujPVCXWbifDIrLxhFGI0iack1z6z0xX6Aq612Url+mAqjIHvdSdUVUH1qmbIBHc3MPQJc5IaHkYVDogk",
	"73mJYe2384N/RgedICuCinC+yZ3n10fcOt8I1Vhv6Nl8o/G0PiGsOQbsEUqPmrq/uCMjAGtQCPjJ0276",
	"99sA+B//3MkiXvbYUpROEe2IWrlnw9psbCaX26tb1tZUs/qtRzFsHeEAH4KtB0AX1X++uLy4ZGBsC0a1",
	"Wi7lx/AqXpFCuIv01tJaR5mGR1AETiim00AjoU1gmOscQXMhgxNUfISHhvxUVdcj4RhecPSLrbq47Qz1",
	"M0C1ba3LcGzxzcXrbRxvzw2/dKPsA3kONl4fJVlmP/9Mwcq03oQeAgFigwUYPlxevkOYYw+fCBdHHdbY",
	"KF/Tm0USrx4Z595wTUviGdHrhF5qFK/kfPmDzgKn3beFDHN+B8OcADeyJp6Y02XQ7Ddi+FBQDRCgC3eL",
	"Q7sbtI3gscmF3eiaAMWaW1Wz9N5DuKPGL5WgPCt5kYB2zkbhS8thDDyMzoyA7Ov9r96Ro4e3nJP0ZI3/",
	"JUvzVBu6LQ7HSCWPdT9q3XKxeNxZR1yn/YInZCEfFGq1riPKgzBSu89U1rZUNYvY+Gr/XwAAAP//Q/Mu",
	"5cwPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
