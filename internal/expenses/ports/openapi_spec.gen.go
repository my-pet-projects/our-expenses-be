// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package ports

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWTW/cRgz9KwLbo2q5yU23tHYL9xADaYoegj3MStzdCaQZmUM5FQz994Iz+spq1rtG",
	"YiCn1YoU+fj4yJknKGzdWIOGHeRP4IoD1so//q4Y95Y6eW7INkis0Vt0YY38ctcg5OCYtNlDn4Iu5XWJ",
	"riDdsBYv+MfohxYTXSZ2l/ABk2KMm8LOUq0YcmhbXUK6DljhI1aLVNow7pHEZFSN62zvVY2RRKvAjaKx",
	"ZM1Y+4efCXeQw0/ZTEk28JFNZPRTMEWkOuj7FAgfWk1YQv4JfB0emyThA4xFzDk3Uwi7/YwFS8wx/u1/",
	"DRqHH7CxxGvmi0VPLoWLIeTltQ4Yzpa64HfKEavtRjGOgE4Vtu2WcntRS76mbAU6hVKxV8qkNnnxC2vf",
	"oyNlHJXoP02X6GIF3hJZijTLlhGFeufE2xYDoA2/fTPDWei8RufU/mSg0XyukiHh6B4tY+h7/gSqqu53",
	"kH96vgPv8cusle8h1Yv2x6C18+sjNpkTqk2/mUs+rcqbQTsXKTIi9HMzNGSItWPB7sk9cBchbESQ3N28",
	"mLJUjoMaDUfXe9ESoSm6qPElU5ZCQ7o4crfttlr4mrbehgl4aJVhzd1F7id21J0UG5IuAi5KGgp4vhEf",
	"0DU22pCYcmf+DX6pukSVJZbfIt81uD4Fh0VLmru/RYSDbFER0ruWD/O/P8Zkf/37EdJwzkukYJ2zH5gb",
	"6CWwNju7Lurj/c29eGuuxP2+pWQgxyUO6dHHekRywf3Xq+urayHRNmhUoyGHt/5VOB093Gx5QjXWcUTT",
	"hIrRJUqoHClMtPHsus4x1lfgk5CST2Qu4F1Z3k5kC5Xo+DdbdmE3Gx5krpqm0oX/LPvsws0mTPS5eV/u",
	"P2HsaD8PKNlK5+VnBgvL3jK16JsdxOVpeHN9/QowJ/0+A5cmH/HYqbbi74YkHJSR5K2RnhYs8zH4pODa",
	"ulZygMTb730y8nvWc7bHiHL+RCOaQDepJnyxlsvoOWxuf19TNTKS8yfh13F3ZOtEVoY0dqcrRkq2ska0",
	"WB9a9PeicEn1zquWpwvSLruaHGNgezECtt+ef/OKGj26xD0nT/H4IVUal9o4bWE5Bim1VA2r1uVZ9nSw",
	"jqVPfSYbMoVHRVptq8DyaAzSHiqFyhaqEpME3/T/BwAA//+vmuJZxw0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
