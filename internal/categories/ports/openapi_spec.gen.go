// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package ports

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYwW7bOBD9FWJ2j0KUbffkW2u3gBfYZrHbYA9dH2hxZLOgSIUcuRUM/fuCpBTJluy4",
	"RZrmkEugmMN5w3mP82TvITNFaTRqcjDbg8u2WPDwOOeEG2Nr/8yVuslh9mkPv1rMYQa/pP2+tN2UfsAv",
	"95uaZA+lNSVakhjySeH/CnSZlSVJo2EGt1reVcikYCZntEWWdfsTyI0tOMEMqkoKSIDqEmEGjqzUG2ia",
	"BCzeVdKigNknn33VrJoE3llrrEc6RM+MwDF+CGZhbQAoNb1+1SNKTbhBC00CBTrHNycTdcsPFdsCduGr",
	"+3iz/owZeaRhL0eHUbhD5R/GFWpeTJT3gRc40eKjKhMouUVNy8DUA/3vgiO3hEV4OCePgTa6ZNxaXsdc",
	"tB0c6ETfwuHa4KTtwrh5TQIOs8pKqv/x0LFna+QW7Zsq4sT/3ndH/OPfj5BE8ftMcbU/85aohMYnljo3",
	"4/Z+vFnc+GhJyoffVJa9+1qiduiYQ7sLuXZoXQz/7er66tqf2pSoeSlhBq/DR/Foody0pallfIM0hv0b",
	"qbLaMa4U68NZbk0RmHa1Iyyu/tMQoCz3+zy58F5qMe8BApe8QELrwi0/xOkUwzp5MDIsl4rQsrXXkfRR",
	"dxUGUUUF9lJq+8on6T2GkjpTlcDhkWqWbaUSFvUJJK7UvI8Yga2NUcj1FFps4FH/TqOcz77yWnWl8az7",
	"gFfX13HwaEId2ONlqWQWWEg/O1/BfpDwsqvjRTjJjme+w4cQlPNK0aOVEOfqBH6l8WuJGaFg2MYk4Kqi",
	"4H50nRBpuPPGTYh6bpETOsaZxi+9BqQeSnok6DdCzPu55mcGOnprRP1o5z8wt3EXujV/NbgIN6SvF4Zj",
	"jGyFzU/Syn2Vz1Ep08yHoME0TPdSNFE2CmnC6xbhc5/GSb1RveGxNXcomIlKWi7GKopbB0I6OxaXC2+p",
	"2YD4tqR2gLQ21c6P4KGHKhiOk4fedsbT5feJu9PVEgsRz4ndnpaej5otF77G8+42QeA9t8vFOW+r39Yh",
	"4BtpzJGy7ROx+KQeUT9vh5hQRllNKOO2FGFQXGoOMf77r3UV9v84QTy+WV3qVPFkh/17MatLRHuswUmb",
	"SguzCw41KeM/zQ4Hoh/r1gd8v2oD9o/Q7Og1+q/wqs+mS2BkTrxRC3QkdXfcpzNHX9WzssYjIUxLqXJ8",
	"c8l3wZ6AuOPqrEHexqzfbpFSixbgxSh/olG2FDTxRw+76/irrGp/t3CzNN1vjSNPTJPyUkICO24lX6vY",
	"224xiqo9KiiTceWXfPJV838AAAD//1fSQBEpFAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
