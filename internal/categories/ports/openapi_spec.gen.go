// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package ports

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWwW7cNhD9FWLao2C5SU+6JbsJsD3EQJugh3QPXHG0y4AiZXLoRFjo3wuSkqW15PW2",
	"cFMfcjHk5eO8mXlPMzpCaerGaNTkoDiCKw9Y8/i44oR7Y9vwzJW6qaD4fISfLVZQwE/5eC/vL+Uf8Ov9",
	"pS47QmNNg5YkxnhShL8CXWllQ9JoKOCTlrcemRTMVIwOyMrhfgaVsTUnKMB7KSADahuEAhxZqffQdRlY",
	"vPXSooDic4i+7bZdBu+sNTYwnbKXRuCcP4JZPJsQSk2vX42MUhPu0UKXQY3O8f2jgYbjp5LtCQf49h5v",
	"dl+wpMA07eWsGIV3qMLDPEPN64X0PvAaF1r8IMsMGm5R0yYq9UT/B3DSlrCOD+fsMfHGEIxby9sUiw6T",
	"gh7pWyyuB2d9F+bN6zJwWHorqf0jUKee7ZBbtG984kn/vR9K/O3Pj5Al84dI6XSs+UDUQBcCS12ZeXs/",
	"3qxvAlqSCvAbb9m7bw1qh445tHcx1h1al+C/XF1fXYeqTYOaNxIKeB1/SqXFdPNepl7xPdKc9nckb7Vj",
	"XCk2wlllTR2Vdq0jrK/+0hCpLA/3grjwXmqxGgmilrxGQuviW37KMziGDfZgZFglFaFlu+AjGVC3HqOp",
	"kgNHK/V95YvyPqSSulRe4LSklpUHqYRF/QgTV2o1ImZkO2MUcg1dtw1uco0JugTAq+vrNBo0oY795U2j",
	"ZBn7lH9xIaPjJOBl5g42Wexf0GbghwiquFf0bCmkybfA7zV+a7AkFAx7TAbO1zUPw+URG8W30rgF260s",
	"ckLHONP4dVRJ6qnpZpZ7I8RqnDzhrUZHb41on63+k/Uz78JwFszLRfTwmC9MBw1Zj93/5JX7LF+iU5aV",
	"j6DJvMqPUnTJNgppYRut4+8hjJN6r8aVxHbcoWAmOWmznrsoXZ0Y6ezg2qzD0isnwvcp9YOkXyT9HIlb",
	"7tQF03Hy1PfIfLr8uvDuDLmkRMRLUneUZdSjZZt1yPH8/lkQ8F7bzfrc9mnfthHwD2WskMrDd1Lxu+6I",
	"9mVviAVnNH7BGZ8aEQfFpcsh4f/9a+3j/f/OEM+/rC7dVKmy0/79WFaXmPahB1OI9DmeXOWt6j/uXZHn",
	"x4NxFDzT5eGbPIM7biXfqdTS4TB5va8QlCm5Ckch+Lb7OwAA//+vMBojTg8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
