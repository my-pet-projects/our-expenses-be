// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package ports

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYTW/bOBD9K8TsHoUo2+7Jt9ZuAS+wzWK3wR66PtDiyGZBkQo/3AqG/vuCpBTJFu24",
	"RZrmkEugmMN5w3mP82TvoVBVrSRKa2C2B1NssaLhcU4tbpRu/DMV4qaE2ac9/KqxhBn8kg/78m5T/gG/",
	"3G9qsz3UWtWoLceQjzP/l6EpNK8tVxJmcCv5nUPCGVElsVskRb8/g1LpilqYgXOcQQa2qRFmYKzmcgNt",
	"m4HGO8c1Mph98tlX7arN4J3WSnukQ/RCMZzih2AS1kaAXNrXrwZELi1uUEObQYXG0M3JRP3yQ8V2gH34",
	"6j5erT9jYT3SuJeTw/DCg+6PUTIQuEMxWhmVLmmVqPsDrTDR+0nimmqUdhkofICYPjhWarEKD+d0MxJN",
	"n4xqTZuYy24TRz1qaDhcF9x3YdrVNgODhdPcNv946NjMNVKN+o2LOPG/9/0R//j3I2TxVvhMcXU489ba",
	"GlqfmMtSTdv78WZx46O5FT78xmny7muN0qAhBvUu5NqhNjH8t6vrq2t/alWjpDWHGbwOH8WjhXLzjqZO",
	"Chu0U9i/0TotDaFCkCGclFpVgWnTGIvV1X8SApSmfp8nF95zyeYDQOCSVmhRm3D9D3F6xZBeHsQqUnJh",
	"UZO11xH3UXcOg6iiAgcpdX2lSXqPobgshGM4PlJDii0XTKM8gUSFmA8RE7C1UgKpTKHFBh717zTK+ewr",
	"r1VTK8+6D3h1fR0nkrQoA3u0rgUvAgv5ZxPv9pDwsqvjRZhkxzPf40MIKqkT9tFKiAM3ge8kfq2xsMgI",
	"djEZGFdV1M+0EyINd16ZhKjnGqlFQyiR+GXQAJdjSU8E/Yax+TDX/MxAY98q1jza+Q9cb9qFfs1fDcrC",
	"DRnqhfEYs9ph+5O0cl/lc1RKmvkQNJqG+Z6zNspGoE143SJ87tMYLjdiMDyypgYZUVFJy8VURXHrSEhn",
	"x+Jy4S21GBHfldQNkM6muvkRPPRQBeNx8tBr0HS6/J64O30tsRD2nNgdaBn4aMhy4Ws8724JAu+5XS7O",
	"eVvztgkB30hjibbYPhGLT+oRzfN2iIQyapdQxm3NwqC41Bxi/Pdfaxf2/zhBPL5ZXepU8WSH/Xsxq0tE",
	"e6zBpE3lldoFh0rK+E+1w5Hop7r1Ad+v2oD9IzQ7eY3+K7zqk3QJxKoTb9QMjeWyP+7TmaOv6llZ45EQ",
	"0lJyhm4u+S44EBB3XJ01yNuY9dstkkvWAbwY5U80yo6CNv7ooXc9f06L7ncLM8vz/VYZ64lpc1pzyGBH",
	"NadrEXvbL0ZRdUcFoQoq/JJPvmr/DwAA//8FDJCwQhQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
