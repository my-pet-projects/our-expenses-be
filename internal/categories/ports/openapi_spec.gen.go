// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package ports

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTY/bNhD9K8S0R2G1TW66Jd4E2B5ioE3QQ+oDLY5sBhSp5YcTwdB/L4aUVvJKXrvA",
	"FtlDLwuu+ThvPp4eeYTS1I3RqL2D4giu3GPN43LFPe6MbWnNlVpXUHw9wq8WKyjgl3w8l/eH8k/4/fFQ",
	"lx2hsaZB6yXGeFLQX4GutLLx0mgo4IuWDwGZFMxUzO+RlcP5DCpja+6hgBCkgAx82yAU4LyVegddl4HF",
	"hyAtCii+UvRNt+ky+GCtscR0yl4agXP+CGZxb0IotX/7ZmSU2uMOLXQZ1Ogc350NNGxfSrYnHOCbR7zZ",
	"fsPSE9O0l7NiFB5Q0WKeoeb1QnqfeI0LLX6SZQYNt6j9fZzUhf4P4DRbj3VcPCePiTaGYNxa3qZYfj8p",
	"6EzfYnE9OOu7MG9el4HDMljp2z+JOvVsi9yifRcST/rv41Di7399hiyJnyKl3bHmvfcNdBRY6srM2/t5",
	"fbcmtPSK4Otg2YcfDWqHjjm0hxjrgNYl+G83tze3VLVpUPNGQgFv40+ptJhu3o+pn/gO/Zz2D/TBase4",
	"UmyEs8qaOk7atc5jffO3hkhlOZ2j4cJHqcVqJIiz5DV6tC5+5ac8g2LYIA/mDauk8mjZlnQkCfUQMIoq",
	"KXCUUt9Xvjjep1RSlyoInJbUsnIvlbCozzBxpVYjYka2NUYh19B1G1KTawzNhQBvbm+TNWiPOvaXN42S",
	"ZexT/s1RRsdJwOvETTJZ7B/NZuCHCKp4UP7FUkjOt8AfNP5osPQoGPaYDFyoa07mckZG8as0bkF2K4vc",
	"o2Ocafw+TknqqehmknsnxGp0Hvqq0fn3RrQvVv/J9TPvwrBH4uUianjMF6ZG423A7idp5THL16iU5clH",
	"0MSv8qMU3WXTGpWz5Q4FM5px5qTeKWT3d89ZVvu+jYBnTev+ji68cjL0Cn25Hzykv0N6C4kX3KkApk5y",
	"6Snyk42lfd22Mhl0S5MlYwkLyvjSiKiuax0l4Sem8i/1EOL5/04QL+9w19pbquy0f/873DWifarBFCK9",
	"4ZKqglX9i9AVeX7cG+dJM11OD7kMDtxKvlWppcNm0npfIShTckVbFHzT/RMAAP//NfTeH4MNAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
