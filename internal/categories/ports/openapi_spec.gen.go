// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package ports

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWwW7cOAz9FYG7RyPOtjff2kkLZA8NsNvFHrpz0Nj0jApZcig6rTHwvy8o2bGnnsn0",
	"UKC9BEr0xEfyPZM5Qumb1jt0HKA4QigP2Oh43GjGvadeztrahxqKT0f4nbCGAn7L53f5+Cj/gF+eHw3Z",
	"EVryLRIbjPFMJT8rDCWZlo13UMA/zjx2qEylfK34gKqc3mdQe2o0QwFdZyrIgPsWoYDAZNwehiEDwsfO",
	"EFZQfJLo22E7ZPCOyJMwnbKXvsI1fwSreLcgNI5fv5oZjWPcI8GQQYMh6P3FQNP1tWRHwgm+fcb73Wcs",
	"WZiWvVwVY/EJrRzWGTrdnEnvg27wTIu/yTKDVhM6vo9KXen/BE7aMjbx8JI9Ft6Ygmki3adYfFgUdKFv",
	"sbgRnI1dWDdvyCBg2ZHh/m+hTj3boSakN13iSb+9n0r889+PkCXzS6R0O9d8YG5hkMDG1X7d3o8Pdw+C",
	"NmwF/tCReve1RRcwqID0FGM9IYUE/+Pm9uZWqvYtOt0aKOB1/FMqLaabjzKNiu+R17R/IXfkgtLWqhmu",
	"avJNVDr0gbG5+c9BpCIt70RceG9ctZkJopa6QUYK8Ss/5ZkcoyZ7KPaqNpaR1E58ZAT12GE0VXLgbKWx",
	"r/qsvN9SGVfarsJlSb0qD8ZWhO4Ck7Z2MyNWZDvvLWoHw7AVN4XWiy4CeHV7m0aDY3Sxv7ptrSljn/LP",
	"QTI6LgJ+n7nFJmf7J9pM/BBBte4s/7AU0uQ7w985/NpiyVgpHDEZhK5ptAyXCzaKX6UPZ2y3IdSMQWnl",
	"8MusknFL060s96aqNvPkka8aA7/1Vf/D6j9ZP+suTHdiXl1FD8/5wnLQMHU4/CSvPGf5KzrlvPIRtJhX",
	"+dFUw/WhNTtnpwNWyjulVTBub1Hd3700svq3fQS8OLTu72ThlQvRa+TyMM2QcYeMIyQuuFMDLCfJtX9F",
	"fvJg6X/tsbIQuhdlh7ShZS0m4Tqy45INRZ4fDz6w6DLkshszeNJk9M6m1k6XyVhjpWB9qa1cSfDt8H8A",
	"AAD//9GKCzvWCgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
