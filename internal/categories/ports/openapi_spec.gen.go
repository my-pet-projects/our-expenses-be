// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package ports

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTW/cNhD9K8S0R8Fyk550S7wJsD3EQBujh3QPXHG0y4AiZX44ERb678WQkqW15PWm",
	"cBMfcjHo5XDezLzHGfEApakbo1F7B8UBXLnHmsflFfe4M7alNVfquoLi0wF+tVhBAb/k47m8P5R/wC/3",
	"h7rsAI01DVovMfqTgv4KdKWVjZdGQwE3Wt4GZFIwUzG/R1YO5zOojK25hwJCkAIy8G2DUIDzVuoddF0G",
	"Fm+DtCig+ETeN92my+CdtcYS0jF6aQTO8aMxi3sTQKn961cjotQed2ihy6BG5/juUUfD9lPB9oCD+ebe",
	"3mw/Y+kJaVrLWTIK71DRYh6h5vVCeB94jQslfhBlBg23qP06MvVE/QfjxK3HOi5OyWOijcEZt5a3yZff",
	"TxJ6pG4xud4466swL16XgcMyWOnbvwg61WyL3KJ9ExJO+u/9kOIff3+ELImfPKXdMee99w105FjqyszL",
	"+/F6dU3W0isyvw6WvfvaoHbomEN7F33doXXJ/LeLy4tLyto0qHkjoYDX8aeUWgw372nqGd+hn8P+iT5Y",
	"7RhXio3mrLKmjky71nmsL/7REKEsp3NELryXWlyNAJFLXqNH6+ItP8YZFMMGeTBvWCWVR8u2pCNJVrcB",
	"o6iSAkcp9XXli/Q+hJK6VEHgNKWWlXuphEX9CBJX6mq0mIFtjVHINXTdhtTkGkO8kMGry8vUGrRHHevL",
	"m0bJMtYp/+woosPE4XniJpks1o+4GfAhGlU8KP9sIaTOt4AfNH5tsPQoGPY2GbhQ15yayyMyirfSuAXZ",
	"XVnkHh3jTOOXkSWpp6KbSe6NEFdj56Fbjc6/NaJ9tvyPxs+8CsMeiZeLqOExXpg2Gm8Ddj9IK/dRvkSl",
	"LDMfjSb9Kj9I0SXZKPQL02gVfyc3TuqdGkcS23KHgpmkpPVqrqJ0dCKkk41rvaKhV06I70PqG0k/SPo+",
	"EqfcsQqm7eSp75F5d/l94e4MsaRAxEtid6Rl5KNl6xXFeHr+LBB4z+16dWr6tG/baPCNNFboy/13YvG7",
	"zoj2ZU+IBWU0YUEZN42IjeLc4ZDs//u1DvH8/yeI5x9W506qlNlx/X4Oq3NE+1CDi2MqD/QCO+MTe5Rb",
	"OnFxsqvdJK/f3tekFj3Az+72A7tbT0GX3pL0gEv8Bav656Ar8vywN84TMV1Or7gM7riVfKtSbYfNJKo+",
	"VVCm5Iq2yPmm+zcAAP//aD56MYARAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
