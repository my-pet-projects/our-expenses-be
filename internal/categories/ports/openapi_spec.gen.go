// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package ports

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYwY7bNhD9FWLao7DaJj35ltgJ4ALNFm2CHlIfaHFsM6BILTl0Ihj694KktJJXstcJ",
	"Nps95LLQWsN5M/Oe5sk+QGHKymjU5GB2AFfssOTxcs4Jt8bW4ZordbOB2ccD/GpxAzP4Je/P5e2h/B1+",
	"vjvUZAeorKnQksSYT4rwV6ArrKxIGg0z+KDlrUcmBTMbRjtkRXc+g42xJSeYgfdSQAZUVwgzcGSl3kLT",
	"ZGDx1kuLAmYfQ/ZVs2oyeGOtsQHpGL0wAsf4MZjFewNAqenlix5RasItWmgyKNE5vj2ZqLv9ULEtYBe+",
	"uos3609YUEAaznLUjMI9qnAxrlDzcqK8d7zEiRHfqzKDilvUtIxMPTD/LjhxS1jGi3PyGGijS8at5XXK",
	"RbtBQyfmFptrg7N2CuPhNRk4LLyVVP8ToNPM1sgt2lc+4aT/3nYt/vHve8iS+EOmdLfveUdUQRMSS70x",
	"4/G+v1nchGhJKoTfeMvefKlQO3TMod3HXHu0LoX/dnV9dR26NhVqXkmYwcv4UWotlpu3NLWMb5HGsH8j",
	"easd40qxPpxtrCkj0652hOXVfxoilOXhXCAX3kot5j1A5JKXSGhdfMqPcTrFsE4ejAzbSEVo2TroSIao",
	"W49RVEmBvZTaufJJeu9DSV0oL3DYUs2KnVTCoj6BxJWa9xEjsLUxCrmGplkFNbnKBF5CwIvr67QaNKGO",
	"8+VVpWQR55R/cqGiwyDhZeIOMpmcX+Cmw4cYtOFe0aOVkDbfBL7X+KXCglAwbGMycL4seVguJ2QUn0rj",
	"JmQ3t8gJHeNM4+eeJamHohtJ7pUQ837zhKcaHb02on60/o/sZzyF7l4QLxdRw329MFw0ZD02P0grd1U+",
	"R6VMMx+DBvsqP0jRJNkopAk3WsTPQxon9Vb1lsTW3KFgJilpuRirKB0dCOns4lougukVA+LbktpF0hpJ",
	"u0eiyx2rYLhOHnofGW+X3yeena6WVIh4Tuz2tPR81Gy5CDWe958JAu+4XS7OuU/9uo4BX0njBqnYPRGL",
	"T+oR9fN2iAllVH5CGR8qERfFpeaQ4r/9sfbx/PcTxOOb1aVOlTo7nt9Ps7pEtPc1OGlTeWn20aEmZfyn",
	"2eNA9GPdhoBvV23E/h6aHb1W/xVfxtl0CYzMiTdrgY6k7tp9OnMMVT0ra7wnhGkp+fBl/oJvaz0B6cTV",
	"WYP8kLJ+vUVKLVqAn0b5A42ypaBJP0vYfceft6r9ZcHN8vywM44CMU3OKwkZ7LmVfK3SbLubSVRtq6BM",
	"wVW4FZKvmv8DAAD//zJkhGXLEwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
