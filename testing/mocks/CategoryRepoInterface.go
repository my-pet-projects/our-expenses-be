// Code generated by mockery v2.6.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "our-expenses-server/models"

	mock "github.com/stretchr/testify/mock"
)

// CategoryRepoInterface is an autogenerated mock type for the CategoryRepoInterface type
type CategoryRepoInterface struct {
	mock.Mock
}

// DeleteAll provides a mock function with given fields: ctx
func (_m *CategoryRepoInterface) DeleteAll(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOne provides a mock function with given fields: ctx, id
func (_m *CategoryRepoInterface) DeleteOne(ctx context.Context, id string) (int64, error) {
	ret := _m.Called(ctx, id)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, filter
func (_m *CategoryRepoInterface) GetAll(ctx context.Context, filter models.CategoryFilter) ([]models.Category, error) {
	ret := _m.Called(ctx, filter)

	var r0 []models.Category
	if rf, ok := ret.Get(0).(func(context.Context, models.CategoryFilter) []models.Category); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.CategoryFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOne provides a mock function with given fields: ctx, id
func (_m *CategoryRepoInterface) GetOne(ctx context.Context, id string) (*models.Category, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Category
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Category); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, category
func (_m *CategoryRepoInterface) Insert(ctx context.Context, category *models.Category) (*models.Category, error) {
	ret := _m.Called(ctx, category)

	var r0 *models.Category
	if rf, ok := ret.Get(0).(func(context.Context, *models.Category) *models.Category); ok {
		r0 = rf(ctx, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Category) error); ok {
		r1 = rf(ctx, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, category
func (_m *CategoryRepoInterface) Update(ctx context.Context, category *models.Category) (string, error) {
	ret := _m.Called(ctx, category)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *models.Category) string); ok {
		r0 = rf(ctx, category)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Category) error); ok {
		r1 = rf(ctx, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
