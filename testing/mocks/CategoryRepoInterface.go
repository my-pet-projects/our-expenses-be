// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "dev.azure.com/filimonovga/our-expenses/our-expenses-server/internal/categories/domain"
	mock "github.com/stretchr/testify/mock"
)

// CategoryRepoInterface is an autogenerated mock type for the CategoryRepoInterface type
type CategoryRepoInterface struct {
	mock.Mock
}

// DeleteAll provides a mock function with given fields: ctx, filter
func (_m *CategoryRepoInterface) DeleteAll(ctx context.Context, filter domain.CategoryFilter) (int, error) {
	ret := _m.Called(ctx, filter)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, domain.CategoryFilter) int); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.CategoryFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOne provides a mock function with given fields: ctx, id
func (_m *CategoryRepoInterface) DeleteOne(ctx context.Context, id string) (int, error) {
	ret := _m.Called(ctx, id)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, filter
func (_m *CategoryRepoInterface) GetAll(ctx context.Context, filter domain.CategoryFilter) ([]domain.Category, error) {
	ret := _m.Called(ctx, filter)

	var r0 []domain.Category
	if rf, ok := ret.Get(0).(func(context.Context, domain.CategoryFilter) []domain.Category); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.CategoryFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOne provides a mock function with given fields: ctx, id
func (_m *CategoryRepoInterface) GetOne(ctx context.Context, id string) (*domain.Category, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Category
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Category); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, category
func (_m *CategoryRepoInterface) Insert(ctx context.Context, category *domain.Category) (*string, error) {
	ret := _m.Called(ctx, category)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Category) *string); ok {
		r0 = rf(ctx, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Category) error); ok {
		r1 = rf(ctx, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, category
func (_m *CategoryRepoInterface) Update(ctx context.Context, category *domain.Category) (string, error) {
	ret := _m.Called(ctx, category)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Category) string); ok {
		r0 = rf(ctx, category)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Category) error); ok {
		r1 = rf(ctx, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
