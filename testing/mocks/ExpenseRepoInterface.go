// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "dev.azure.com/filimonovga/our-expenses/our-expenses-server/internal/expenses/domain"
	mock "github.com/stretchr/testify/mock"
)

// ExpenseRepoInterface is an autogenerated mock type for the ExpenseRepoInterface type
type ExpenseRepoInterface struct {
	mock.Mock
}

// DeleteAll provides a mock function with given fields: ctx
func (_m *ExpenseRepoInterface) DeleteAll(ctx context.Context) (*domain.DeleteResult, error) {
	ret := _m.Called(ctx)

	var r0 *domain.DeleteResult
	if rf, ok := ret.Get(0).(func(context.Context) *domain.DeleteResult); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, expense
func (_m *ExpenseRepoInterface) Insert(ctx context.Context, expense domain.Expense) (*string, error) {
	ret := _m.Called(ctx, expense)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, domain.Expense) *string); ok {
		r0 = rf(ctx, expense)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Expense) error); ok {
		r1 = rf(ctx, expense)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
