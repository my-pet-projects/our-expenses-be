// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	auth "dev.azure.com/filimonovga/our-expenses/our-expenses-server/pkg/auth"
	mock "github.com/stretchr/testify/mock"
)

// AppCryptoInterface is an autogenerated mock type for the AppCryptoInterface type
type AppCryptoInterface struct {
	mock.Mock
}

// GenerateTokens provides a mock function with given fields: id, user
func (_m *AppCryptoInterface) GenerateTokens(id string, user string) (string, string, error) {
	ret := _m.Called(id, user)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(id, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(id, user)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(id, user)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// HashPassword provides a mock function with given fields: password
func (_m *AppCryptoInterface) HashPassword(password string) (string, error) {
	ret := _m.Called(password)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateToken provides a mock function with given fields: signedToken
func (_m *AppCryptoInterface) ValidateToken(signedToken string) (*auth.SignedDetails, error) {
	ret := _m.Called(signedToken)

	var r0 *auth.SignedDetails
	if rf, ok := ret.Get(0).(func(string) *auth.SignedDetails); ok {
		r0 = rf(signedToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.SignedDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(signedToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyPassword provides a mock function with given fields: hashedPassword, providedPassword
func (_m *AppCryptoInterface) VerifyPassword(hashedPassword string, providedPassword string) error {
	ret := _m.Called(hashedPassword, providedPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(hashedPassword, providedPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
